IR:

/// @use-src 0:"src/test.sol"
object "test_27" {
    code {
        /// @src 0:0:245  "contract test {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        constructor_test_27()

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("test_27_deployed"), datasize("test_27_deployed"))

        return(_1, datasize("test_27_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 0:0:245  "contract test {..."
        function constructor_test_27() {

            /// @src 0:0:245  "contract test {..."

        }
        /// @src 0:0:245  "contract test {..."

    }
    /// @use-src 0:"src/test.sol"
    object "test_27_deployed" {
        code {
            /// @src 0:0:245  "contract test {..."
            mstore(64, memoryguard(128))

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0x63184987
                {
                    // basicFunction()

                    external_fun_basicFunction_8()
                }

                case 0x96e181cf
                {
                    // testSave()

                    external_fun_testSave_26()
                }

                default {}
            }

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
                revert(0, 0)
            }

            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
                revert(0, 0)
            }

            function abi_decode_tuple_(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            }

            function array_length_t_string_memory_ptr(value) -> length {

                length := mload(value)

            }

            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }

            function copy_memory_to_memory_with_cleanup(src, dst, length) {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                mstore(add(dst, length), 0)
            }

            function round_up_to_mul_of_32(value) -> result {
                result := and(add(value, 31), not(31))
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)

            }

            function external_fun_basicFunction_8() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_basicFunction_8()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function abi_encode_tuple__to__fromStack(headStart ) -> tail {
                tail := add(headStart, 0)

            }

            function external_fun_testSave_26() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                fun_testSave_26()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

            function zero_value_for_split_t_string_memory_ptr() -> ret {
                ret := 96
            }

            function panic_error_0x41() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }

            function finalize_allocation(memPtr, size) {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                // protect against overflow
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }

            function allocate_memory(size) -> memPtr {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }

            function array_allocation_size_t_string_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function store_literal_in_memory_614d936be137cf7bcd79779d172ddd37ffe97ff84aa0009cf8ca4d8265a6c1fa(memPtr) {

                mstore(add(memPtr, 0), "this works")

            }

            function copy_literal_to_memory_614d936be137cf7bcd79779d172ddd37ffe97ff84aa0009cf8ca4d8265a6c1fa() -> memPtr {
                memPtr := allocate_memory_array_t_string_memory_ptr(10)
                store_literal_in_memory_614d936be137cf7bcd79779d172ddd37ffe97ff84aa0009cf8ca4d8265a6c1fa(add(memPtr, 32))
            }

            function convert_t_stringliteral_614d936be137cf7bcd79779d172ddd37ffe97ff84aa0009cf8ca4d8265a6c1fa_to_t_string_memory_ptr() -> converted {
                converted := copy_literal_to_memory_614d936be137cf7bcd79779d172ddd37ffe97ff84aa0009cf8ca4d8265a6c1fa()
            }

            /// @ast-id 8
            /// @src 0:21:113  "function basicFunction() public returns (string memory) {..."
            function fun_basicFunction_8() -> var__3_mpos {
                /// @src 0:62:75  "string memory"
                let zero_t_string_memory_ptr_1_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3_mpos := zero_t_string_memory_ptr_1_mpos

                /// @src 0:87:106  "return \"this works\""
                var__3_mpos := convert_t_stringliteral_614d936be137cf7bcd79779d172ddd37ffe97ff84aa0009cf8ca4d8265a6c1fa_to_t_string_memory_ptr()
                leave

            }
            /// @src 0:0:245  "contract test {..."

            function zero_value_for_split_t_function_internal_nonpayable$__$returns$_t_string_memory_ptr_$() -> ret {
                ret := 0
            }

            /// @ast-id 26
            /// @src 0:119:241  "function testSave() public {..."
            function fun_testSave_26() {

                /// @src 0:156:193  "function () returns (string memory) f"
                let var_f_16_functionIdentifier
                let zero_t_function_internal_nonpayable$__$returns$_t_string_memory_ptr_$_2_functionIdentifier := zero_value_for_split_t_function_internal_nonpayable$__$returns$_t_string_memory_ptr_$()
                var_f_16_functionIdentifier := zero_t_function_internal_nonpayable$__$returns$_t_string_memory_ptr_$_2_functionIdentifier
                /// @src 0:208:221  "basicFunction"
                let expr_19_functionIdentifier := 1
                /// @src 0:204:221  "f = basicFunction"
                var_f_16_functionIdentifier := expr_19_functionIdentifier
                let expr_20_functionIdentifier := expr_19_functionIdentifier
                /// @src 0:231:232  "f"
                let _3_functionIdentifier := var_f_16_functionIdentifier
                let expr_22_functionIdentifier := _3_functionIdentifier
                /// @src 0:231:234  "f()"
                let expr_23_mpos := dispatch_internal_in_0_out_1(expr_22_functionIdentifier)

            }
            /// @src 0:0:245  "contract test {..."

            function panic_error_0x51() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x51)
                revert(0, 0x24)
            }

            /// @src 0:0:245  "contract test {..."
            function dispatch_internal_in_0_out_1(fun) -> out_0 {
                switch fun

                case 1
                {
                    out_0 := fun_basicFunction_8()
                }

                default { panic_error_0x51() }
            }
            /// @src 0:0:245  "contract test {..."

        }

        data ".metadata" hex"a2646970667358221220e0bbe781101d8fa341ca8d3acf9147141f8e1f00f45b962c9f3758aa9d72966364736f6c63430008110033"
    }

}


